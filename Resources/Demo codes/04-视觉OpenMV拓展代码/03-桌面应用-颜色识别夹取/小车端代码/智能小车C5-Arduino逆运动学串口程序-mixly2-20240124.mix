<xml version="Mixly 2.0 rc3" board="Arduino AVR@Arduino/Genuino Uno"><block type="base_setup" id="2/{$rGITD^IvOqk/`-fy" x="901" y="-2425"><comment pinned="false" h="80" w="160">循迹 S1\n超声波 S3</comment><statement name="DO"><block type="ZLKPZAR_KMS_INIT" id="]=+.rVh-r0.LitfTwH~#"><value name="L0"><shadow type="math_number" id="Iy$^9SLj#gF(YM?ydefy"><field name="NUM">159</field></shadow></value><value name="L1"><shadow type="math_number" id="3{B?N$rN`x63u@3[c(),"><field name="NUM">105</field></shadow></value><value name="L2"><shadow type="math_number" id="B.f+-=](=MYi5~?W1:eg"><field name="NUM">75</field></shadow></value><value name="L3"><shadow type="math_number" id="Nq720HF=Hz|RI,KluG|t"><field name="NUM">185</field></shadow></value><next><block type="ZLKPZAR_SETUP" id="5tOK!htuCv~7*N)4i~aI"><next><block type="serial_begin" id="m1uj{l-bfLQU/?s}u@O+"><field name="serial_select">Serial</field><value name="CONTENT"><shadow type="math_number" id="6;0Xp8EXGja$d[?cFp`J"><field name="NUM">115200</field></shadow></value><next><block type="ZLKPZAR_BEEP_TIMES" id="MSx9Y6GdX.u@~)=C3)39"><value name="times"><shadow type="math_number" id="_*]:NxOU.b9M./U[~XF}"><field name="NUM">3</field></shadow></value><value name="delay"><shadow type="math_number" id="3t7FJOD-x4avPRXWUU[-"><field name="NUM">100</field></shadow></value><next><block type="controls_delay" id="!#pyn_@G8WJ`V5(a`T;x"><field name="UNIT">delay</field><value name="DELAY_TIME"><shadow type="math_number" id="+1Z0#Y{wS!s8nnKk2`3a"><field name="NUM">500</field></shadow></value></block></next></block></next></block></next></block></next></block></statement></block><block type="procedures_defnoreturn" id="(=a{T7Zg(cS4MzB#+XF;" x="1711" y="-2418"><field name="NAME">AI_parse_cmd</field><comment pinned="false" h="80" w="160">处理串口接收的数据</comment><statement name="STACK"><block type="controls_if" id="pGGyQ~Z7}}ZovH#,YFQZ"><value name="IF0"><block type="text_length" id="9zFwi+[(}}?T9^:K?l}N"><value name="VAR"><shadow type="text"><field name="TEXT">hello</field></shadow><block type="ZLKPZAR_UART_GET" id="Oyo0k[;q,Nee+7Gu5M`3"></block></value></block></value><statement name="DO0"><block type="ZLKPZAR_UART_CLEAR" id="Il9EyF~2Zt3gpyk,]Ro`"></block></statement></block></statement></block><block type="ZLKPZAR_START2" id="|)kF3dmg/n,$8St+F|9r" x="903" y="-2111"><statement name="DO"><block type="ZLKPZAR_LOOP" id="!G]/]VGIPP:N~VvZTIcY"><next><block type="procedures_callnoreturn" id="5hKHdf}E4Rx/$F_+Y{R?"><mutation name="AI_parse_cmd"></mutation></block></next></block></statement></block></xml><code></code>